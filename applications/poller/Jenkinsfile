node{
	def commit_id
  def kubernetesCredentials = 'kubernetes_credentials'
  def DOCKERHUB_CREDENTIALS = 'dockerhub_credentials'
  def pollerReleaseName = "poller"
  def poller_DB_Credentials = 'poller_db_credentials'
  def openWeatherApiKey='OW_API_KEY'


	stage('Git Clone') {
		checkout scm
	}

  stage('Build docker image') {
  commit_id = sh(returnStdout: true, script: 'git rev-parse HEAD')
  commit_id = sh(returnStdout: true, script: """echo $commit_id . """).trim()
  dockerImage = docker.build ("${env.BACKEND_IMAGE_POLLER}")
  }
		
    
  stage('Push image') {
          docker.withRegistry( '', DOCKERHUB_CREDENTIALS ) {
          dockerImage.push("$commit_id")
          dockerImage.push("latest")
      }
  }

  stage('Startup activities'){
  echo "${env.KUBERNETES_API}"
  withKubeConfig([credentialsId: kubernetesCredentials,
                      serverUrl: "${env.KUBERNETES_API}"
                      ]) {
        sh "kubectl cluster-info"
  }

  }

  stage('Continous Deployment Helm Upgrade'){
  
  withKubeConfig([credentialsId: kubernetesCredentials,
                      serverUrl: "${env.KUBERNETES_API}"
                      ]) {
        sh "helm version"
        sh "pwd"
        sh "ls -a"
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: poller_DB_Credentials,
    usernameVariable: 'DBUSERNAME', passwordVariable: 'DBPASSWORD']]) {
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: DOCKERHUB_CREDENTIALS,
    usernameVariable: 'DOCKERUSERNAME', passwordVariable: 'DOCKERPASSWORD']]) {
        withCredentials([string(credentialsId: openWeatherApiKey, variable: 'OWKEY')]) {
        
        sh("helm upgrade poller ./helm/poller-helm/ --set DB_USERNAME=$DBUSERNAME,DB_PASS=$DBPASSWORD,DB_HOST_POLLER=${DB_HOST_POLLER},imageCredentials.Docker_username=$DOCKERUSERNAME,imageCredentials.Docker_password=$DOCKERPASSWORD,OW_API_KEY=${OWKEY},pollerDockerImage=${BACKEND_IMAGE_POLLER}:$commit_id")  
        }
    }
    }
  }
  }


}
